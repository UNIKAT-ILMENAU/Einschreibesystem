var prntSvcs = angular.module("prntSvcs", []);
prntSvcs.factory("printer", ["$rootScope", "$compile", "$http", "$timeout", "$q", function ($rootScope, $compile, $http, $timeout, $q) {
    var printHtml = function (html) {
        var mywindow = window.open();
        return mywindow.document.write(html), mywindow.print(), mywindow.close(), !0
    }, print = function (templateUrl, data, workshop) {
        $http.get(templateUrl).success(function (template) {
            var printScope = $rootScope.$new(), _data = {data: {participants: data, workshop: workshop}};
            angular.extend(printScope, _data);
            var element = $compile($("<div>" + template + "</div>"))(printScope), waitForRenderAndPrint = function () {
                printScope.$$phase || $http.pendingRequests.length ? $timeout(waitForRenderAndPrint) : (printHtml(element.html()), printScope.$destroy())
            };
            waitForRenderAndPrint()
        })
    }, printFromScope = function (templateUrl, scope) {
        $rootScope.isBeingPrinted = !0, $http.get(templateUrl).success(function (template) {
            var printScope = scope, element = $compile($("<div>" + template + "</div>"))(printScope), waitForRenderAndPrint = function () {
                printScope.$$phase || $http.pendingRequests.length ? $timeout(waitForRenderAndPrint) : printHtml(element.html()).then(function () {
                    $rootScope.isBeingPrinted = !1
                })
            };
            waitForRenderAndPrint()
        })
    };
    return{print: print, printFromScope: printFromScope}
}]);
var restSvcs = angular.module("restSvcs", ["ngResource"]);
restSvcs.factory("Workshops", ["$resource", function ($resource) {
    return $resource("/api/workshops/:id", {}, {getAll: {method: "GET", params: {id: "all"}, isArray: !0}, getWorkshop: {method: "GET", params: {id: "@id"}, isArray: !1}, getParticipants: {method: "GET", url: "/api/workshops/:id/participants", params: {id: "@id"}, isArray: !0}, enroll: {method: "POST", url: "/api/workshops/:id/enroll", params: {id: "@id"}, isArray: !1}, unsubscribe: {method: "POST", url: "/api/workshops/unsubscribe", isArray: !1}, getWaitinglist: {method: "GET", url: "/api/workshops/:id/waitinglist", params: {id: "@id"}, isArray: !0}, confirmEnroll: {method: "GET", url: "/api/workshops/:id/enroll/:userid/confirm/:token", params: {id: "@id", userid: "@userid", token: "@token"}, isArray: !1}, unsubscribeConfirm: {method: "GET", url: "/api/workshops/:id/unsubscribe/:token/confirmation/:participantId"}})
}]), restSvcs.factory("WorkshopTemplate", ["$resource", function ($resource) {
    return $resource("/api/admin/workshops/template/:id", {}, {getAll: {method: "GET", params: {id: "list"}, isArray: !0}, get: {method: "GET", params: {id: "@id"}, isArray: !1}, edit: {method: "PATCH", params: {id: "@id"}, isArray: !1}, put: {method: "PUT", isArray: !1}, deleteWorkshopTemplate: {method: "DELETE", params: {id: "@id"}, isArray: !1}})
}]), restSvcs.factory("AdminWorkshop", ["$resource", function ($resource) {
    return $resource("/api/admin/workshops/:id", {}, {gethistory: {method: "GET", params: {id: "history"}, isArray: !0}, putWorkshop: {method: "PUT", isArray: !1}, edit: {method: "PATCH", params: {id: "@id"}, isArray: !1}, deleteWorkshop: {method: "DELETE", params: {id: "@id"}, isArray: !1}, overbook: {method: "PATCH", url: "/api/admin/workshops/:id/waitinglist/:participantid", params: {id: "@id", participantid: "@participantid"}, isArray: !1}, participants: {method: "GET", url: "/api/admin/workshops/:id/participants", params: {id: "@id"}, isArray: !0}, waitinglist: {method: "GET", url: "/api/admin/workshops/:id/waitinglist", params: {id: "@id"}, isArray: !0}, confirmParticipation: {method: "POST", url: "/api/admin/workshops/:id/participated/:participant", params: {id: "@id", participant: "@participant"}, isArray: !0}})
}]), restSvcs.factory("Participants", ["$resource", function ($resource) {
    return $resource("/api/admin/participants/:id", {}, {getall: {method: "GET", params: {id: "all"}, isArray: !0}, getblacklistall: {method: "GET", url: "/api/admin/participants/blacklist/all", isArray: !0}, blacklist: {method: "PUT", url: "/api/admin/participants/:id/blacklist", params: {id: "@id"}, isArray: !1}, removeBlacklist: {url: "/api/admin/participants/:id/blacklist", method: "DELETE", params: {id: "@id"}, isArray: !1}, getParticipant: {method: "GET", params: {id: "@id"}, isArray: !1}, remove: {method: "DELETE", url: " /api/admin/participants/:participant/remove/:workshop", params: {participant: "@participant"}, workshop: "@workshop", isArray: !1}})
}]), restSvcs.factory("EmailTemplate", ["$resource", function ($resource) {
    return $resource("/api/admin/email/template/:id", {}, {getAll: {url: "/api/admin/email/template/list", method: "GET", isArray: !0}, get: {method: "GET", params: {id: "@id"}, isArray: !1}, edit: {method: "PATCH", params: {id: "@id"}, isArray: !1}, put: {method: "PUT", isArray: !1}, "delete": {method: "DELETE", params: {id: "@id"}, isArray: !1}})
}]), restSvcs.factory("Email", ["$resource", function ($resource) {
    return $resource("/api/admin/email/:id/send", {}, {sendEmail: {method: "POST", params: {id: "@id"}, isArray: !1}})
}]), restSvcs.factory("Admin", ["$resource", function ($resource) {
    return $resource("/api/admin", {}, {list: {url: "/api/admin/user/list", method: "GET", isArray: !0}, "delete": {url: "/api/admin/user/:id", method: "DELETE", params: {id: "@id"}, isArray: !1}, changePassword: {url: "/api/admin/user", method: "PATCH", isArray: !1}, resetPassword: {url: "/api/user/reset/password", method: "POST", isArray: !1}, requestReset: {url: " /api/user/send/password/forgot/email", method: "POST", isArray: !1}, invite: {url: "/api/admin/user/invite", method: "POST", isArray: !1}, editContact: {url: "/api/admin/user/contact/data", method: "PUT", isArray: !1}, editLegalNotice: {url: "/api/admin/user/legal/notice", method: "PUT", isArray: !1}, getContact: {url: "/api/user/contact/data", method: "GET", isArray: !1}, getLegalNotice: {url: "/api/user/legal/notice", method: "GET", isArray: !1}, changeEmail: {url: "/api/admin/user/email", method: "PATCH", isArray: !1}, createAdmin: {url: "/api/user/create/admin", method: "POST", isArray: !1}})
}]);